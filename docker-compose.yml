version: "3.2"
services:
    rabbitmq-server:
        container_name: rabbitmq-server
        image: rabbitmq
        hostname: "rabbitmq-server"
        environment:
            RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
            RABBITMQ_DEFAULT_USER: "guest"
            RABBITMQ_DEFAULT_PASS: "guest"
            RABBITMQ_DEFAULT_VHOST: "/"
        ports:
            - "15672:15672"
            - "5672:5672"
        labels:
            NAME: "rabbitmq-server"

    python-order-service:
        container_name: python-order-service
        build: ./python-order-service
        # 'rabbitmq-server' will be available as a network reference inside this service 
        # and this service will start only after the RabbitMQ service has.
        depends_on:
            - rabbitmq-server
        # Keep it running.  
        tty: true
        # Map port 3000 on the host machine to port 3000 of the container.
        ports:
            - "3000:3000"
        volumes:
            - './python-order-service:/python-order-service'

    python-factory-service:
        container_name: python-factory-service
        build: ./python-factory-service
        # 'rabbitmq-server' will be available as a network reference inside this service 
        # and this service will start only after the RabbitMQ service has.
        depends_on:
            - rabbitmq-server
        # Keep it running.  
        tty: true
        # Map port 3001 on the host machine to port 3001 of the container.
        ports:
            - "3001:3001"
        volumes:
            - './python-factory-service:/python-factory-service'

    redis:
        container_name: redis
        image: redis

# Host volumes used to store code.
volumes:
    python-order-service:
    python-factory-service:
